主要内容:
	函数的概念，设计与实现
	变量的作用域与生存期
	递归函数
	
	
1，函数的概念，设计与实现	
函数: function,功能模块
	在C语言中，函数就是完成某个特定功能的指令序列的封装。
	 (1)函数可以实现代码复用
	 (2)项目的模块化设计
	 (3)函数的灵活调用可以实现积木式的搭建
	 
	"函数就是实现某个功能的指令序列"
	
函数设计
	需求分析: 你得知道函数用来完成什么功能
	资源分析: 功能的实现需要哪些资源，比如需要什么数据，分配多少内存空间(变量)
	反馈结果: 函数实现功能的表现
	
函数的实现(定义)

	返回类型  函数名(输入参数列表)
	{
		语句(功能的实现)
	}
	
	"返回类型":函数返回值的类型(return语句后面那个表达式值的类型)
			   一般是"单值"类型,即基本类型和指针类型。
			   函数也可以没有返回值==> void
			   不指定函数类型，默认为int型
	"函数名":C语言标识符。把该名字与此函数关联起来
	"输入参数列表":功能模块的输入。格式如下:
		参数类型1 参数名1,参数类型2 参数名2,....
		函数也可以没有参数，用void表示，也可以不写
	注意:函数不能嵌套定义，即函数必须定义在函数的外面

函数的调用:
	主调函数:  调用其它函数的函数，比如说main()
	被调函数:  被其它函数调用的函数
	
	"实际参数" :在函数调用过程中，主调函数传递给被调函数的输入参数值
	"形式参数" :被调函数在定义时的参数
	 
	函数的调用过程:
		(1)把实参的值赋值给相应的形参
		(2)然后运行函数主体中的语句
		(3)函数调用返回后，函数表达式的值就是return后面表达式的值(也可以没有返回值)
	 
	数据传递:
		主调函数 ==> 被调函数  ： 参数
		被调函数 ==> 主调函数  :  返回值
		主调函数 <=> 被调函数  :  全局变量
		
return语句的作用
	(1)结束函数(提前返回函数)
	(2)返回一个值给主调函数

2，变量的作用域与生存期
	作用域:变量名能表示该内存空间的范围	
	
	全局变量:
		在函数外面定义的变量(定义在最前面)，叫全局变量
		全局变量的作用域: 自定义处往下到文件结束(别的文件里也能调用，但是
		                要用extern声明)
		但是,如果一个全局变量有static修饰，那么这个全局变量的作用域
		就限制在本文件中。
		同理，如果有一个函数被static修饰，那么这个函数也只能在本文件中调用。
		
		
	局部变量:
		在函数体内或复合语句内定义的变量，叫局部变量。
		局部变量的作用域，自定义处起到函数或复合语句结束(即第一个右花括号结束)
		
	★不同作用域的两个变量，必然是两个独立的内存空间。
	   即使重名了，就近往上找。
	   
	★形不改实:当主调函数调用被调函数，且实际参数是变量时，则被调函数里的
	  形参变量的变化，不会影响到实参的值。
	  原因:形参只是被调函数里的局部变量，与实参变量是两个独立的内存空间，
	  只是形参变量的值被赋值与实参的值而已。两者互不影响。
	  
	生存期:生存周期。一个变量过了它的生存期，其内存空间将会被系统释放掉
		全局变量的生存期，随进程持续性。
			你的程序一运行(进程)，全局变量就一直存在，直到你的进程退出。
			
		局部变量的生存期
		(1)static 局部变量
			static int a;//定义一个静态局部变量
			static局部变量的生存期，随进程持续性，且初始化(定义时直接赋值)只执行一次
	
		(2)普通局部变量
			int a;
			普通局部变量的生存期，是从定义处到第一个右花括号结束。
		
3，递归
	递归函数，是指在函数的定义过程中，直接或者间接调用了自身的函数。
	
	C语言递归函数设计
	(1)问题模型本身要符合递归模型(弄清递推关系)
	(2)先明确函数要实现的功能与参数之间的关系，暂不管功能的具体实现
	(3)问题的解，当递归到一定层次时，答案是显而易见的，且能结束函数(不能无限递归)
	(4)要层现第n层与第n-1层之间的递归(递推)关系
	
	
作业:分解连续数
	输入一个正整数，把它分解成连续数字相加的形式
	eg:
	输入 15
	输出
		1+2+3+4+5
		4+5+6
		7+8




	