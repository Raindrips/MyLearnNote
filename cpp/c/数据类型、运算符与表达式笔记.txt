★重点理解的内容:心法秘籍(掌握了才能灵活运用)
☆先不要求掌握，了解即可，以后会详细讲解
1,C语言的数据类型
	基本类型:系统分配给基本类型的变量的内存大小是固定的
		整型:
			(unsigned)short   2字节(16bits)
			(unsigned)int     4字节(32bits)
			(unsigned)long    4字节(32bits)
			
		实型(浮点型)
			单精度实型  float   4字节
			双精度实型  double  8字节
			
		字符型
			(unsigned)char    1字节
			
	☆构造类型:系统分配给构造类型的变量的内存大小，决定于该类型具体是怎样定义的
		数组类型
		结构体类型
		联合体类型(共用体)
		枚举类型
		
	☆指针类型
		*
		
	空类型(无值类型) void
	
2,常量与变量
	常量:在程序运行期间，其值不能被改变的量称为常量
		如: 1   2   3   3.14
		3 = 4;//error,3是一个常量，其值是不能被改变的
		
	变量:一个可以被改变的量
		变量实质上是内存的一个具有特定属性的存储单元，它是用来存储数据的。
		这个存储单元中的数据，就是变量的值，而这个值可以在程序运行期间被改变(赋值)
	变量名：变量的名字
		★系统把内存以一个字节为单位划分成许多份进行编号，这个编号就是地址(无符号32位整数)
		即每增加一个字节地址加1.操作系统访问内存的哪个单元时，必须要知道它的地址。
		
		在定义变量时，会在内存分配空间(大小根据变量的类型)，这时变量名就与该空间的首地址
		关联起来，即系统由变量名知道该内存空间的地址。
		
	变量的定义:
		数据类型  变量名;
	eg:   int   a;
		  "数据类型":所有C语言里合法的类型都可以
		  "变量名":变量的名字
				★在C语言中，不管是给什么对象取名字，都要符合C语言标识符标准:
				C语言标识符必须由下划线、字母、数字组成，且第一个字符必须为字母或下划线
			建议:给对象取名，尽量做到"见其名知其义"
			
	变量的访问(读/写)
	(1)从变量中取值(读)，实际上是通过变量名找到相应的内存地址，从该地址对应的存储的单元中
		读取数据。这时变量一般在赋值符号(=)的右边，表示变量的值，我们称为右值。
	(2)给变量赋值(写)，实际上通过变量名找到相应的内存地址，把数据写到该地址对应的存储单元
		中去，覆盖掉原来的值。这时变量一般在赋值符号(=)的左边，表示变量的内存空间，
		我们称为左值。
		
	给变量的第一次赋值，我们叫做初始化，若变量没有初始化，其值是不确定的。
		我们在对变量读操作或者计算的时候要先初始化，否则是没有意义的。
		
	常变量:在定义的时候用const修饰的变量，我们叫做常变量，其特点是初始化之后不能再
		被赋值。
		eg:  const int a;
		
3,整型数据
	整型常量:
		十进制数    1  2   3   99       %d
		八进制数    以0开头的数   0664  %o
		十六进制数  以0x开头的数  0x12  %x
		转化为十进制==>直接乘以权相加
		转化为非十进制==>先转化为2进制，再转化为其它进制
		
	整型变量
		★整型数据在内存中是以二进制的补码形式存放的，且最高位是符号位，
		  1表示负数，0表示整数,其它位是数值位
		 "补码":
			正数:
				原码(直接转化为二进制)
			负数:
				绝对值的原码按位取反加1
		(1)当编译器以整型输出时(%d)，是以补码还原的方式去解读的。
		(2)当CPU把数据进行运算时，直接以内存中存放的形式进行运算的，即补码的形式。
		(3)当编译器以无符号整型输出时(%u)，就没有符号位的概念了，就会直接把所有位
		   都当作数值位转化为十进制输出。
		   
	C语言各整型之间的赋值问题
		长-->短 : int=>short short=>char int=>char
			只保留低字节
		短-->长 : short=>int char=>short char=>char
			unsigned: 低字节直接拷贝，高位补0
			signed  : 低字节直接拷贝，高位补符号位
			
4,浮点型数据
	单精度(float 32bits)   %f
	双精度(double 64bits)  %lf
	printf("%5.2f\n",4.2);//整个小数占5位(包括小数点),小数部分占2位,向右靠齐,有四舍五入
	printf("%-5.2f\n",4.2);//整个小数占5位(包括小数点),小数部分占2位,向左靠齐,有四舍五入
	
5,字符型数据    %c
  char ,  unsigned char    8bits
  在内存中存放的字符型数据实际上是一个字符的编号，我们叫做ASCII码(man ascii)。
  字符型数据在内存中存放的实际上就是一个小于255(8bits)的无符号整数
  
  字符常量  ' '
  'a' <==> 97
  '\n'  换行	
  '\t'  横向跳格(tab)
  '\r'  回车(回到本行行首)
  '\b'  back 退格
  '\\'  反斜杠
  '%%'  %
  '\ddd'  ddd表示1到3位的八进制数，打印效果为该数字对应的ASCII码的字符 
  '\xhh'  hh表示1到2位的十六进制数，打印效果为该数字对应的ASCII码的字符
 eg:
	#include <stdio.h>
	char ch;
	ch = getchar();//从终端输入一个字符
	putchar(ch);//向终端输出一个字符
	putchar('a');
	putchar(97);
	putchar('\n');                                           
 
 字符串常量 "" ,  "abcdef"    %s
	字符串在内存中保存一定会有一个终止符('\0'),'\0'的ASCII码就是0
	字符串是没有变量的，后面我们会学到字符串可以用字符数组来保存。
	
	int a,b,c;
	scanf("%d%d%d",&a,&b,&c);//格式化输入
	printf("%d %o %x %s\n",a,b,c,"hehaisong");//格式化输出
	
5,运算符与表达式
	什么是表达式?(任何表达式都是有值的)
	==>表达式就是表达某个意思的式子。
	在C语言中，表达式就是运算符连接操作数的式子。
	
	C语言中的运算符:
	(1)算术运算符: 双目运算符， 结合性(运算顺序):左->右
		*  /   %  +   -
		★注意:整数/整数其结果还是整数,想要这结果为实数，可在分子*1.0(隐式类型转换)
		隐式类型转换:高精度与低精度进行运算时，其结果自动转变为高精度。
		%：取余运算符，在C语言中，%要求两个操作数必须为整数
			5%3   2%3  -5%2   5%-2   -5%-2
			
	(2)关系运算符:  双目运算符，左->右，表达两个式子的关系
		>  >=  < <=
		==  !=
		由关系运算符连接操作数的表达式，叫做关系表达式
		关系表达式的值为:  1(关系成立)  0(关系不成立)
		5>4>3
		==>1>3
		==>0
	(3)逻辑运算符:表达某数理逻辑的表达式
		值: 真(1,非0)    假:0
		★任何非0的数都表示真，如果表达式的结果为真时，其值只能是1
			!(逻辑非)，单目运算符，取逻辑上的反，右-->左
			&&(逻辑与),双目运算符，"并且"，结合性:左-->右
				a && b && c
			||(逻辑或)，"或者",结合性 左-->右
			
		★在C语言中，运算是"惰性运算"，如果事先知道了表达式的值，那么它
		  就不会去运算后面的式子了
		eg:	a && b && c
			只有当a的值为真时，才有必要去判断b的值
			只有当a和b的值都为真，才有必要去判断c的值
			a || b || c
			只有当a的值为假时，才有必要去判断b的值
			只有当a和b的值都为假时，才有必要去判断c的值
	(4)位运算符:  按bit位来进行运算操作的运算符
		(请参考PPT: 第12章_位运算)
		~(按位取反):单目运算符，把每一位都0变成1，1变成0
		
		&(按位与):双目运算符
			1 1 1 0  1 0 0 1
			0 0 1 1  1 1 1 0
		=》 0 0 1 0  1 0 0 0 ==> 0x28
		
		|(按位或)：双目运算符
			12 | 7 ==> 15
			0 0 0 0  1 1 0 0
			0 0 0 0  0 1 1 1
			
		^(按位异或):双目运算符，不同为真，同为假
			12 ^ 7 ==> 11
			0 0 0 0  1 1 0 0
			0 0 0 0  0 1 1 1
			0 0 0 0  1 0 1 1
			
		<<(左移):双目运算符，按bit位往左边移
		eg:  2<<1  ==> 4
		    把数值2按bit位往左边移1个bit位，最右边补0
		>>(右移):双目运算符，按bit位往右边移
		    逻辑右移:  高位补0
			算术右移:  高位补符号位(右移缩小2倍)
			C语言标准中，并没有规定右移是逻辑右移还是算术右移，
			不同的C编译器(跟具体的芯片有关)在实现右移的实现可能不同。
			
	(5)赋值运算符:双目运算符，右->左，优先级排倒数第二
		= 
		eg:  a = 5+3;//赋值运算符的左边必须是可写的地址
		复合的赋值运算符: 赋值运算符可以和算术运算符、位运算符组成复合的赋值运算符
	
		+=   :  a+=5  ==>  a = a+5
		-=
		*=      a*=3+5  ==>  a = a*(3+5)
		/=
		%=
		~=
		&=
		|=
		^=
		<<=
		>>=
		★如果要改变一个变量的值，只有写操作(赋值)才可以
		
	(6)条件运算符：    ? :   三目运算符   自右向左
		表达式1 ? 表达式2 : 表达式3
		求值顺序: 如果表达式1的值为真，则整个条件运算表达式的值为表达式2的值
		          如果表达式1的值为假，则整个条件运算表达式的值为表达式3的值
		注意:这里也有一个惰性运算
	
	(7)逗号运算符:  双目运算符，优先级最低的 ， 左->右
		格式:     表达式1 , 表达式2
		求值顺序:先求表达式1的值，再求表达式2的值，整个逗号表达式的值
				为表达式2的值
		
		逗号表达式的扩展:
				表达式1,表达式2,表达式3,....表达式n
		求值顺序:先求表达式1的值，再求表达式2的，再求表达式3的值...最后求表达式n的值
				整个逗号表达式的值为表达式n的值
		
	(8)☆指针运算符(* , &)	
	(9)求字节运算符(sizeof)
		求字节运算符的结果只看圆括号内是什么数据类型，单位为字节
			sizeof(1.0) ==   sizeof(double)
			sizeof(1.0f) ==  sizeof(float)
			sizeof(3)  ==  sizeof(int)
			sizeof(3L) ==   sizeof(long)
			short s;
			sizeof(s+1) ==  sizeof(int)
	(10)☆分量运算符(.  ->)
		求结构体变量的成员变量
		a.i
		p->i (p为结构体指针)
	(11)☆下标运算符([])
		取数组的元素
		int a[10];
		a[0],a[1]...a[9]
	(12)强制类型转换运算符
		(类型)
		eg:  float a = 3.6;
			 printf("%d\n",a);
	
	(13)自增，自减运算符(++,--) 单目运算符
					表达式的值     做完这个表达式后i的值
		i++            i                 i=i+1
		++i            i+1               i=i+1
		i--            i                 i=i-1
		--i            i-1               i=i-1
		注意:自加和自减，在编译时有时会被优化，导致运算顺序改变，
		      尽量不要用的太复杂
			  

我们在运算一个表达式的时候，先看优先级，再看是否有惰性运算，再看结合性
运算符的优先级及结合性总结
	() [] ->  .              自左向右
	!  ~  ++  -- +-(正负号)  自右向左     单目运算符
	*   /   %                自左向右     算术运算符
	+   -
	<  <=   >  >=            自左向右     关系运算符
	==  !=  
	& ^  |  << >>            自左向右     位操作运算符
	&&                       自左向右     逻辑运算符
	||
	? :                      自右向左     条件运算符
	= += -= *= /=            自右向左     赋值运算符
	%= &= ^= |= <<= >>=    
    ,                        自左向右     逗号运算符	
	
	同级优先级的运算符，实际优先级左侧优先,
	实在记不住，自觉打括号
	