Class|src
工程文件存放在Class|src文件上

CCDirector:导演类
	sharedDirector()
	
CCScene:场景类
	CCLayer:图层
	
	调用场景:
	
	Scene* HelloWorld::createScene()
	{
		return HelloWorld::create();
	}
	auto scene = HelloWorld::createScene();
	director->runWithScene(scene);
	
Sprite:精灵类

CCSprite

Sprite::create(PNGpath);
Sprite::create(PNGpath,Rect(x,y,width,height));//创建一个裁剪的图片


SpriteObj->setPosition(Vec2(int x,int y));

scene->addChild(sprite,0) //添加sprite类 

ccc4(r,g,b,a);

创建精灵
CCSize screenSize = CCDirector::sharedDirector() -> getVisibleSize();
CCSprite* sprite = CCSprite::create("filepath.png");
sprite->setPosition(Vec2(x,v));
this->addChild(player);

//通过Size类获取屏幕大小
	Size size = Director::getInstance()->getVisibleSize();
/*
 *创建字体
 *@parma"Text":文字 
 *@parma:字体
 @parma fontSize
 */
  Label *label = Label::createWithTTF("Text", "fonts/Marker Felt.ttf", 24);
	/**设置坐标*/
  label->setPosition(Vec2(size.width / 2, size.height * 5 / 6));
	
  this->addChild(label);
	/*创建精灵*/
  auto sprite = Sprite::create("Helloworld.png");
  sprite->setPosition(Vec2(size.width / 2, size.height / 2));
  this->addChild(sprite);
  auto closeItem = MenuItemImage::create("CloseNormal.png", "CloseSelected.png", CC_CALLBACK_1(TestLayer::menuCloseCallBack, this));
  closeItem->setPosition(Vec2(100,100));
  auto menu = Menu::create(closeItem,nullptr);
  this->addChild(menu);


//每n秒执行一次方法
schedule(CC_SCHEDULE_SELECTOR(类名::方法名),n);




#节点的使用
//创建节点
Node *node=Node::create();
//添加节点
this->addChild(node,0,123);  //123 是 tag
//查找节点
Node *temp_node = this->getChildByTag(123);
//移除节点，并停止节点的一切动作
this->removeChildByTag(123, true);



//循环和调度

头文件创建
virtual void update(float delta);

//调用update函数,每帧调用一次
void ScheduleUpdate() 

//创建回调函数
void schedule(SEL_SCHEDULE selector,float dt);

void unschedule(SEL_SCHEDULE selector);




