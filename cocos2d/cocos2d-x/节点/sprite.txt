图层打包工具:	
    Texture Packer
    Zwoptex
    ShoeBox
    Sprite Sheet Packer


//创建精灵
auto mySprite = Sprite::create("mysprite.png", Rect(0,0,40,40));

//创建texture
Texture2d t2d = TextureCache::getInstance()->addImage("hero.png");
//创建帧
SpriteFrame *frame0 = SpriteFrame::createWithTexture(t2d, Rect(32*0, 32*direction, 32, 32));
//添加帧
Vector<SpriteFrame*> animFrames;
animFrames.pushBack(frame0);
//创建动画
Animation* animation = Animation::createWithSpriteFrames(animFrames, 0.05f);

//加入缓存
AnimationCache::getInstance()->addAnimation(createNPCAnimation(), "name");

auto action =Action::create

//通过文件名创建
static Sprite *create(string &filename);

//指定创建的裁剪区域 rotated 是否旋转纹理
static Sprite *create(string &filename,Rect &rect,bool rotated=false);



//指定纹理创建精灵
static Sprite *create(Texture2D &texture);

static Sprite *create(Texture2D &texture,Rect &rect,bool rotated=flse);


//使用纹理图集
plist文件
	常用软件，Zwoptex,TexturePacker

#精灵缓存
	TextureCache			使用纹理缓存对象

	SpriteFrameCache	能够使用精灵表中的创建精灵缓存
		SpriteFrameCache::getInstance()->addSpriteFrameWithFile("1.plist");
		auto moutainal = Sprite::createWithSpriteFrames("moutain.png");

	AnimationCache		动画缓存主要用于精灵动画，精灵动画每一帧都是从动画获取的


#生命周期
bool init() 															//初始化层调用
void onEnter()														//进入层时调用
void onEnterTransitionDidFinish()					//进入层且过渡动画结束时调用
void onExit()															//退出层时调用
void onExitTransitionDidStart()						//退出层且开始过渡动画时调用
void cleanup()														//层对象被清除时调用


#场景切换
auto director = Director::getInstance();
	void runWithScene(Scene *scene); 	//运行场景。

	void replaceScene(Scene* scene); 	//切换场景

	void pushScene(Scene* scene);			//添加场景,并切换到那个场景

	void popScene(Scene* scene);			//回到上次场景，配合pushScene使用

	void popToRootScene()							//回到跟场景

	

