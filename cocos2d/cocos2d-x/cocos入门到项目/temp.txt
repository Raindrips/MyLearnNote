#include "GameMain.h"
#include "StartLayer.h"
#include "Plane.h"

cocos2d::Scene* GameMain::MainScene(){

  Scene* scene_m = Scene::create();

  GameMain* layer_m = GameMain::create();

  scene_m->addChild(layer_m);

  return scene_m;
}

void GameMain::initAllParamter() {

  this->score_m = 0;
  this->soundOpen = true;
  this->isMoved = false;
  this->number = 0;
  this->enemyNumber = 0;
  this->clicknumber = 0;
  this->game_over_layer = NULL;
}

bool GameMain::init() {

  if (cocos2d::Layer::init()) {
  this->setTouchEnabled(true);

  this->windowSize = this->getContentSize();

  this->initAllParamter();

  this->bgImg = Sprite::createWithSpriteFrameName("game_bg.png");
  this->bgImg->setAnchorPoint(Vec2(0, 1));
  this->bgImg->setPosition(Vec2(0, this->windowSize.height));
  this->addChild(this->bgImg);

  this->bgTop = Sprite::createWithSpriteFrameName("game_bg.png");
  this->bgTop->setAnchorPoint(Vec2(0, 1));
  this->bgTop->setPosition(Vec2(0, this->windowSize.height * 2));
  this->addChild(this->bgTop);


  //this->schedule(schedule_selector(GameMain::updateBgImagePostion), 0.005);
  this->schedule(schedule_selector(GameMain::countTimeAndScore), 1);


  ///返回按钮
  Sprite* nornal = Sprite::createWithSpriteFrameName("back.png");
  this->productMenuBtn("back.png", "back_selected.png", Vec2(0, 1), Vec2(this->windowSize.width - nornal->getContentSize().width - 20, this->windowSize.height - nornal->getContentSize().height), CC_CALLBACK_1(GameMain::backToStartLayer, this));

  ///暂停按钮
  Sprite* nornal_p = Sprite::createWithSpriteFrameName("pause.png");
  this->productMenuBtn("pause.png", "pause_selected.png", Vec2(0, 1), Vec2(this->windowSize.width - nornal_p->getContentSize().width - 20,
    nornal_p->getContentSize().height), CC_CALLBACK_1(GameMain::pauseGame, this));

  ///声音按钮
  Sprite* music_no = Sprite::createWithSpriteFrameName("music_open.png");
  this->productMenuBtn("music_open.png", "music_close.png", Vec2(0, 1), Vec2(
    this->windowSize.width - music_no->getContentSize().width * 3,
    (this->windowSize.height - music_no->getContentSize().height) / 2), CC_CALLBACK_1(GameMain::controlGameSound, this));

  ///创建状态栏的背景图片
  this->gameState = Sprite::createWithSpriteFrameName("top.png");
  this->gameState->setAnchorPoint(Vec2(0, 1));
  this->gameState->setPosition(Vec2(0, this->windowSize.height));

  this->addChild(this->gameState);

  ///创建成绩标签
  this->score_show = Label::create();
  this->score_show->setContentSize(Size(200, this->gameState->getContentSize().height));
  this->score_show->setAnchorPoint(Vec2(0.5, 0.5));
  this->score_show->setPosition(Vec2(300, this->gameState->getContentSize().height / 2));
  this->score_show->setColor(Color3B::RED);
  this->score_show->setString("1000分");

  this->gameState->addChild(this->score_show);



  this->createTimeShow();

  this->rain = ParticleRain::createWithTotalParticles(20);
  this->rain->setPosition(Vec2(this->windowSize.width / 2, this->windowSize.height));
  this->addChild(this->rain, 9);


  return true;
  }
  return false;
}


void GameMain::createTimeShow() {

  if (this->time != NULL) {
  this->removeChild(this->time);
  this->time = NULL;
  }

  if (this->time == NULL) {
  this->time = TimeNumber::create();
  this->time->loadTimeBg();
  this->time->setAnchorPoint(Vec2(0.5, 0.5));
  this->time->setPosition(Vec2(100, (this->getContentSize().height - time->getContentSize().height)));

  this->addChild(this->time, 1);
  }

}

Menu* GameMain::productMenuBtn(char *norImg, char *setImg, cocos2d::Vec2 poitAch, cocos2d::Vec2 poist, const ccMenuCallback &callback) {

  ///返回按钮
  Sprite* nornal = Sprite::createWithSpriteFrameName(norImg);
  Sprite* selected = Sprite::createWithSpriteFrameName(setImg);

  MenuItemSprite* startBtn = MenuItemSprite::create(nornal, selected, callback);
  Menu* list = Menu::create(startBtn, NULL);
  list->setAnchorPoint(poitAch);
  list->setPosition(poist);

  this->addChild(list);

  return list;
}

void GameMain::playSound() {

  if (this->soundOpen) {

  SimpleAudioEngine::getInstance()->playEffect("gun.mp3");

  }

}

void GameMain::controlGameSound(cocos2d::Ref *object) {

  MenuItemSprite* btn = (MenuItemSprite*)object;

  if (this->soundOpen) {
  this->soundOpen = false;
  btn->setNormalImage(Sprite::createWithSpriteFrameName("music_close.png"));
  } else {
  this->soundOpen = true;
  btn->setNormalImage(Sprite::createWithSpriteFrameName("music_open.png"));
  }

}

void GameMain::changeBgImagePostion(cocos2d::Sprite *bgImage_m) {

  if (bgImage_m->getPosition().y <= 0) {
  bgImage_m->setPosition(Vec2(0, this->windowSize.height * 2));
  } else {
  float yy = bgImage_m->getPosition().y;
  yy -= 1;
  bgImage_m->setPosition(Vec2(0, yy));
  }

}

void GameMain::updateBgImagePostion(float time) {

  this->changeBgImagePostion(this->bgImg);

  this->changeBgImagePostion(this->bgTop);


}

void GameMain::countTimeAndScore(float time) {

  this->time->countTimer(0);

}

void GameMain::countScoreUse() {


  this->score_m++;

  ScaleTo * max = ScaleTo::create(0.25, 1.5);
  ScaleTo * min = ScaleTo::create(0.25, 0.5);
  ScaleTo * start = ScaleTo::create(0.25, 1);
  CallFunc* textShow = CallFunc::create(CC_CALLBACK_0(GameMain::scoreShowControl, this));
  Sequence* list = Sequence::create(max, min, textShow, start, NULL);

  this->score_show->runAction(list);

}

void GameMain::scoreShowControl() {
  char scoreFormat[20];
  sprintf(scoreFormat, "%.3d分", this->score_m);
  this->score_show->setString(scoreFormat);
}


void GameMain::backToStartLayer(cocos2d::Ref *object) {

  TransitionRotoZoom* anmation = TransitionRotoZoom::create(1, StartLayer::createGameStartScent());
  Director::getInstance()->replaceScene(anmation);


}

void GameMain::pauseGame(cocos2d::Ref *object) {

  this->pause();

  Sprite* music_no = Sprite::createWithSpriteFrameName("player.png");
  Sprite* music_sele = Sprite::createWithSpriteFrameName("player.png");
  music_sele->setColor(Color3B::GREEN);

  MenuItemSprite* musicBtn = MenuItemSprite::create(music_no, music_sele, CC_CALLBACK_1(GameMain::startGameRun, this));
  this->music_list = Menu::create(musicBtn, NULL);
  this->music_list->setAnchorPoint(Vec2(0.5, 0.5));
  this->music_list->setPosition(Vec2(
  this->windowSize.width,
  this->windowSize.height) / 2);

  this->addChild(this->music_list);

  ScaleTo * max = ScaleTo::create(0.25, 1.5);
  ScaleTo * min = ScaleTo::create(0.25, 0.5);
  RepeatForever* list = RepeatForever::create(Sequence::create(max, min, NULL));

  musicBtn->runAction(list);

}

void GameMain::startGameRun(cocos2d::Ref *object) {

  this->removeChild(this->music_list);

  this->resume();

}

void GameMain::onEnter() {
  Layer::onEnter();


}

void GameMain::onEnterTransitionDidFinish() {
  Layer::onEnterTransitionDidFinish();

  this->createMainPlane();

  this->schedule(schedule_selector(GameMain::managerMainBullet), 0.1);
  this->schedule(schedule_selector(GameMain::managerEnemyAirplanes), 0.1);
  this->schedule(schedule_selector(GameMain::managerEnemyBullet), 0.1);
  this->schedule(schedule_selector(GameMain::managerCollision), 0);

}

void GameMain::createMainPlane() {

  if (this->main_plane != NULL) {
  this->removeChild(this->main_plane);
  this->main_plane = NULL;
  }

  if (this->main_plane == NULL) {
  this->main_plane = PlaneSprite::createPlane("MAIN.png");
  this->main_plane->playType = plane_main;

  Size planeSize = this->main_plane->getContentSize();

  this->main_plane->setPosition(Vec2(this->windowSize.width / 2, planeSize.height));


  Sprite* fly = Sprite::createWithSpriteFrameName("fly.png");
  fly->setContentSize(Size(fly->getContentSize().width, fly->getContentSize().height));
  fly->setPosition(Vec2(planeSize.width / 2, planeSize.height / 2));

  LoopRotate* rot = LoopRotate::createLoopRotate(1, 30);
  RepeatForever* forever = RepeatForever::create(rot);

  fly->runAction(forever);

  this->main_plane->addChild(fly);

  }
  this->addChild(this->main_plane, 10);

}

void GameMain::onExit() {
  Layer::onExit();



}

void GameMain::temCollision(Bullet_Type bltType, Plane_Type planemark1, Plane_Type planemark2, bool planeCollision) {

  Vector<Node*> allnode = this->getChildren();
  for (int a = int(allnode.size() - 1); a >= 0; a--) {

  auto node = allnode.at(a);
  if (planeCollision) {
    if (strcmp(typeid(*node).name(), typeid(PlaneSprite).name()) == 0) {
    PlaneSprite* main_bullet = (PlaneSprite*)node;
    if (main_bullet->playType == planemark1) {
      for (int b = int(allnode.size() - 1); b >= 0; b--) {

      auto plane_en = allnode.at(b);
      if (strcmp(typeid(*plane_en).name(), typeid(PlaneSprite).name()) == 0) {

        PlaneSprite* plane = (PlaneSprite*)plane_en;
        if ((plane->playType == planemark2) && plane->getBoundingBox().intersectsRect(main_bullet->getBoundingBox())) {
        this->bombEffect(plane->getPosition());


        this->removeEnemyAirplanes(plane);

        if (main_bullet->playType != plane_main) {
          this->removeEnemyAirplanes(main_bullet);
        } else if (main_bullet->playType == plane_main) {
          this->removeEnemyAirplanes(main_bullet);
          this->loadGameOverUI();
        }

        this->playSound();

        this->countScoreUse();
        }

      }

      }
    }

    }
  } else {
    if (strcmp(typeid(*node).name(), typeid(Bullet).name()) == 0) {
    Bullet* main_bullet = (Bullet*)node;
    if (main_bullet->type == bltType) {
      for (int b = int(allnode.size() - 1); b >= 0; b--) {

      auto plane_en = allnode.at(b);
      if (strcmp(typeid(*plane_en).name(), typeid(PlaneSprite).name()) == 0) {

        PlaneSprite* plane = (PlaneSprite*)plane_en;
        if ((plane->playType == planemark1) && plane->getBoundingBox().intersectsRect(main_bullet->getBoundingBox())) {

        this->bombEffect(plane->getPosition());


        this->removedBullet(main_bullet);

        if (plane->playType != plane_main) {
          this->removeEnemyAirplanes(plane);
        } else if (plane->playType == plane_main) {
          this->removeEnemyAirplanes(plane);
          this->loadGameOverUI();

        }

        this->playSound();
        this->countScoreUse();
        }

      }

      }
    }

    }
  }


  }

}

void GameMain::managerCollision(float time) {

  ///主机子弹和敌机发生碰撞
  this->temCollision(bullet_main, plane_enemy, plane_def, false);
  ///主机和敌机发生碰撞
  this->temCollision(bullet_def, plane_main, plane_enemy, true);
  ///敌机的子弹和主机发生碰撞
  this->temCollision(bullet_enemy, plane_main, plane_main, false);
  ///主机的道具和敌机发生碰撞
  this->temCollision(bullet_main_tool, plane_enemy, plane_enemy, false);

}

void GameMain::bombEffect(cocos2d::Vec2 local) {


  Sprite* bomb = Sprite::createWithSpriteFrameName("bomb_img.png");
  bomb->setPosition(local);
  this->addChild(bomb, 10);

  ScaleTo* min = ScaleTo::create(0, 0);
  ScaleTo* max = ScaleTo::create(0.25, 2.5);
  FadeOut* out = FadeOut::create(0);
  CallFuncN* fun = CallFuncN::create(CC_CALLBACK_1(GameMain::removeBombEffectImg, this));

  Sequence* seq = Sequence::create(min, max, out, fun, NULL);

  bomb->runAction(seq);

}

void GameMain::removeBombEffectImg(cocos2d::Ref *object) {

  Sprite* bomb = (Sprite*)object;
  this->removeChild(bomb);

}

void GameMain::managerEnemyBullet(float time) {

  Vector<Node*> allNode = this->getChildren();

  int tag = random(1, 10);

  for (int a = 0; a < allNode.size(); a++) {

  Node* object = allNode.at(a);

  if (strcmp(typeid(PlaneSprite).name(), typeid(*object).name()) == 0) {
    PlaneSprite* enemy = (PlaneSprite*)object;
    if ((enemy->playType == plane_enemy) && (tag == enemy->tag)) {

    Bullet* enemyBullet = Bullet::createBullet("bullet_good.png");
    enemyBullet->type = bullet_enemy;
    Vec2 local = enemy->getPosition();
    enemyBullet->setPosition(local);
    this->addChild(enemyBullet, 1);

    MoveTo* to = MoveTo::create(1, Vec2(local.x, local.y - 150));
    CallFuncN* fun = CallFuncN::create(CC_CALLBACK_1(GameMain::removedBullet, this));
    Sequence* seq = Sequence::create(to, fun, NULL);

    enemyBullet->runAction(seq);

    }
  }

  }

}


void GameMain::managerEnemyAirplanes(float time) {

  if (this->enemyNumber < 2) {
  this->enemyNumber++;

  char enemyName[30];
  int rand = random(1, 3);
  sprintf(enemyName, "planes_%d.png", rand);

  PlaneSprite* enemy = PlaneSprite::createPlane(enemyName);
  enemy->playType = plane_enemy;
  enemy->tag = this->enemyNumber;

  int Xlocal = random(50, 1000);
  int Ylocal = this->getContentSize().height + enemy->getContentSize().height;

  int ZXLocal = Xlocal;
  int ZYLocal = -enemy->getContentSize().height;

  enemy->setPosition(Vec2(Xlocal, Ylocal));
  this->addChild(enemy, 9);

  MoveTo* move = MoveTo::create(random(4, 6), Vec2(ZXLocal, ZYLocal));
  CallFuncN* fun = CallFuncN::create(CC_CALLBACK_1(GameMain::removeEnemyAirplanes, this));
  Sequence* seq = Sequence::create(move, fun, NULL);

  enemy->runAction(seq);

  }

}


void GameMain::removeEnemyAirplanes(cocos2d::Ref *object) {

  this->enemyNumber--;
  PlaneSprite* blt = (PlaneSprite*)object;
  blt->stopAllActions();
  this->removeChild(blt);
  blt = NULL;

}

void GameMain::managerMainBullet(float time) {

  if (this->number < 10) {
  this->number++;
  Bullet* blt = Bullet::createBullet("bullet_2.png");
  Vec2 plainLocal = this->main_plane->getPosition();
  blt->type = bullet_main;
  plainLocal = Vec2(plainLocal.x, plainLocal.y + this->main_plane->getContentSize().height / 2);
  blt->setPosition(plainLocal);

  this->addChild(blt, 9);

  MoveTo* to = MoveTo::create(0.5, Vec2(plainLocal.x, plainLocal.y + 200));
  CallFuncN* fun = CallFuncN::create(CC_CALLBACK_1(GameMain::removedBullet, this));

  Sequence* seq = Sequence::create(to, fun, NULL);

  blt->runAction(seq);

  this->playSound();
  }

}

void GameMain::removedBullet(cocos2d::Ref *object) {

  this->number--;

  Bullet* blt = (Bullet*)object;
  blt->stopAllActions();
  this->removeChild(blt);
  blt = NULL;

}

void GameMain::doubleClick(float time) {

  this->clicknumber = 0;

}

void GameMain::mainPlainTool() {

  Vec2 mainLocal = this->main_plane->getPosition();

  Bullet* left = Bullet::createBullet("tool.png");
  Bullet* right = Bullet::createBullet("tool.png");

  left->type = bullet_main_tool;
  right->type = bullet_main_tool;

  this->addChild(left, 1);
  this->addChild(right, 1);

  left->runAction(this->mainPlainToolAction(mainLocal, true));
  right->runAction(this->mainPlainToolAction(mainLocal, false));

}

Sequence* GameMain::mainPlainToolAction(cocos2d::Vec2 startLocal, bool leftOrRight) {

  ScaleTo* min1 = ScaleTo::create(0, 0);
  MoveTo* start = NULL;
  if (leftOrRight == true) {
  start = MoveTo::create(0, Vec2(startLocal.x - 20, startLocal.y));
  } else {
  start = MoveTo::create(0, Vec2(startLocal.x + 20, startLocal.y));
  }
  ScaleTo* max1 = ScaleTo::create(0.25, 1);
  MoveTo* move1 = MoveTo::create(1, Vec2((leftOrRight ? startLocal.x - 20 : startLocal.x + 20), startLocal.y + 250));
  CallFuncN* fun = CallFuncN::create(CC_CALLBACK_1(GameMain::removeMainTool, this));

  Sequence* seq = Sequence::create(min1, start, max1, move1, fun, NULL);
  return seq;
}

void GameMain::removeMainTool(cocos2d::Ref *object) {

  Bullet* dd = (Bullet*)object;
  this->removeChild(dd);

}


void GameMain::onTouchesBegan(const std::vector<Touch *> &touches, cocos2d::Event *unused_event) {
  Layer::onTouchesBegan(touches, unused_event);

  this->clicknumber++;

  Touch* object = touches.at(0);

  if (this->clicknumber == 1) {
  this->schedule(schedule_selector(GameMain::doubleClick), 0.25);
  } else {
  this->clicknumber = 0;
  ///double click
  printf("double click...");
  this->mainPlainTool();
  }

  Vec2 local = object->getLocation();

  if ((this->main_plane->boundingBox().containsPoint(local))) {
  this->isMoved = true;
  }

}

void GameMain::onTouchesMoved(const std::vector<Touch *> &touches, cocos2d::Event *unused_event) {
  Layer::onTouchesMoved(touches, unused_event);
  this->unschedule(schedule_selector(GameMain::doubleClick));
  if (this->main_plane != NULL) {
  Touch* object = touches.at(0);
  Vec2 local = object->getLocation();

  if (this->isMoved) {

    this->main_plane->setPosition(local);

  }
  }

}

void GameMain::onTouchesEnded(const std::vector<Touch *> &touches, cocos2d::Event *unused_event) {
  Layer::onTouchesEnded(touches, unused_event);
  this->unschedule(schedule_selector(GameMain::doubleClick));
  this->isMoved = false;
}

void GameMain::loadGameOverUI() {

  this->pause();
  this->setTouchEnabled(false);
  if (this->game_over_layer != NULL) {
  this->removeChild(this->game_over_layer);
  this->game_over_layer = NULL;
  }
  if (this->game_over_layer == NULL) {
  this->game_over_layer = GameOver::create();
  this->game_over_layer->game_main = this;
  }

  this->addChild(this->game_over_layer, 10);

}

void GameMain::reloadGame() {

  if (this->game_over_layer != NULL) {
  this->removeChild(this->game_over_layer);
  this->game_over_layer->game_main = NULL;
  this->game_over_layer = NULL;
  }

  Vector<Node*> allnode = this->getChildren();
  for (int a = int(allnode.size() - 1); a >= 0; a--) {

  auto node = allnode.at(a);
  if (strcmp(typeid(PlaneSprite).name(), typeid(*node).name()) == 0) {

    this->removeChild(node);

  } else if (strcmp(typeid(Bullet).name(), typeid(*node).name()) == 0) {

    this->removeChild(node);

  }

  }

  this->initAllParamter();

  this->createTimeShow();

  this->createMainPlane();

  this->countScoreUse();

  this->resume();
  this->setTouchEnabled(true);

}